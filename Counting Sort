#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 905000000

int Max(int vector[], int size) {
    int max = vector[0];
    int i;
    for (i = 1; i < size; i++) {
        if (vector[i] > max) {
            max = vector[i];
        }
    }
    return max;
}

void CountingSort(int vector[], int size) {
    int max = Max(vector, size);
    int* out = (int*)malloc(size * sizeof(int));
    if (out == NULL) {
        fprintf(stderr, "Error.\n");
        exit(EXIT_FAILURE);
    }

    int* count = (int*)malloc((max + 1) * sizeof(int));
    if (count == NULL) {
        free(out);
        fprintf(stderr, "Error: No se pudo asignar memoria.\n");
        exit(EXIT_FAILURE);
    }

    int num, nindex;
    int i;

    for (i = 0; i <= max; i++) {
        count[i] = 0;
    }

    for (i = 0; i < size; i++) {
        num = vector[i];
        count[num]++;
    }

    for (i = 1; i <= max; i++) {
        count[i] += count[i - 1];
    }

    for (i = size - 1; i >= 0; i--) {
        num = vector[i];
        nindex = count[num] - 1;
        out[nindex] = num;
        count[num]--;
    }

    for (i = 0; i < size; i++) {
        vector[i] = out[i];
    }

    free(out);
    free(count);
}

void tiempo(clock_t inicio, clock_t fin) {
    double tiempo = ((double)(fin - inicio)) / CLOCKS_PER_SEC;
    printf("Tiempo de ejecucion: %f segundos\n", tiempo);
}

int main() {
    int* vector = (int*)malloc(N * sizeof(int));
    if (vector == NULL) {
        fprintf(stderr, "Error: No se pudo asignar memoria.\n");
        return EXIT_FAILURE;
    }

    srand(time(NULL));
    // Genera y llena el vector con nÃºmeros aleatorios
    for (int i = 0; i < N; i++) {
        vector[i] = rand() % 10000;
    }

    clock_t inicio_time = clock();
    CountingSort(vector, N);

    clock_t fin_time = clock();
    tiempo(inicio_time, fin_time);

    free(vector);
    return 0;
}
